knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(DescTools)
library(CORElearn)
library(tree)
library(rpart)
library(rpart.plot)
churn <- read.csv('churn.csv', header=TRUE, stringsAsFactors = TRUE)
str(churn)
summary(churn)
#set.seed(1234)
##sample_of_churn <- sample_n(churn, 2000, replace = FALSE)
#index <- sample(nrow(churn), 2000, replace = FALSE)
#sample_of_churn <- churn[index,]
#str(sample_of_churn)
# ggplot(data = sample_of_churn, mapping = aes(x = HANDSET_PRICE, y = INCOME)) + geom_point(aes(color = LEAVE)) + labs(title = "Relationship between HANDSET_PRICE, INCOME and CHURN", x = "HANDSET_PRICE", y = "INCOME", color = "CHURN") + theme(plot.title = element_text(hjust = 0.5))
set.seed(1234)
sample_of_churn <- sample_n(churn, 2000, replace = FALSE)
#index <- sample(nrow(churn), 2000, replace = FALSE)
#sample_of_churn <- churn[index,]
str(sample_of_churn)
ggplot(data = sample_of_churn, mapping = aes(x = HANDSET_PRICE, y = INCOME)) + geom_point(aes(color = LEAVE)) + labs(title = "Relationship between HANDSET_PRICE, INCOME and CHURN", x = "HANDSET_PRICE", y = "INCOME", color = "CHURN") + theme(plot.title = element_text(hjust = 0.5))
#sample_of_churn <- sample_n(churn, 2000, replace = FALSE)
index <- sample(nrow(churn), 2000, replace = FALSE)
sample_of_churn <- churn[index,]
str(sample_of_churn)
ggplot(data = sample_of_churn, mapping = aes(x = HANDSET_PRICE, y = INCOME)) + geom_point(aes(color = LEAVE)) + labs(title = "Relationship between HANDSET_PRICE, INCOME and CHURN", x = "HANDSET_PRICE", y = "INCOME", color = "CHURN") + theme(plot.title = element_text(hjust = 0.5))
#sample_of_churn <- sample_n(churn, 2000, replace = FALSE)
index <- sample(1:nrow(churn), 2000, replace = FALSE)
sample_of_churn <- churn[index,]
str(sample_of_churn)
ggplot(data = sample_of_churn, mapping = aes(x = HANDSET_PRICE, y = INCOME)) + geom_point(aes(color = LEAVE)) + labs(title = "Relationship between HANDSET_PRICE, INCOME and CHURN", x = "HANDSET_PRICE", y = "INCOME", color = "CHURN") + theme(plot.title = element_text(hjust = 0.5))
#sample_of_churn <- sample_n(churn, 2000, replace = FALSE)
index <- sample(nrow(churn), 2000, replace = FALSE)
#sample_of_churn <- sample_n(churn, 2000, replace = FALSE)
index <- sample(1:nrow(churn), 2000, replace = FALSE)
sample_of_churn <- churn[index,]
str(sample_of_churn)
ggplot(data = sample_of_churn, mapping = aes(x = HANDSET_PRICE, y = INCOME)) + geom_point(aes(color = LEAVE)) + labs(title = "Relationship between HANDSET_PRICE, INCOME and CHURN", x = "HANDSET_PRICE", y = "INCOME", color = "CHURN") + theme(plot.title = element_text(hjust = 0.5))
sample_of_churn <- sample_n(churn, 2000, replace = FALSE)
#absolute frequencies of the classes in the LEAVE attribute:
leavetable <- table(churn$LEAVE)
leavetable
#relative frequencies of the classes in the LEAVE attribute:
#p1 for LEAVE
p1 <- leavetable["LEAVE"] / length(churn$LEAVE)
p1
#p2 for STAY
p2 <- leavetable["STAY"] / length(churn$LEAVE)
p2
#Based on the relative frequencies, calculate the entropy for the LEAVE attribute:
parent_entropy <- (-1 * p1 * log2(p1)) + (-1 * p2 * log2(p2))
parent_entropy
#Entropy can also be calculated by using the Entropy() function in the DescTools package:
Entropy(table(churn$LEAVE), base = 2)
length(leavetable)
leavetable
length(churn$LEAVE)
leavetable["STAY"]
#Entropy can also be calculated by using the Entropy() function in the DescTools package:
#Entropy(table(churn$LEAVE), base = 2)
cross_tabulation_LEAVE_COLLEGE <- table(churn$LEAVE, churn$COLLEGE)
cross_tabulation_LEAVE_COLLEGE
#The attrEval() function in the CORElearn package evaluates the “quality” of
#attributes, and information gain is one of the many quantities that can be calculated in
#this way.
sort(round(attrEval(formula = LEAVE~., data = churn, estimator = "InfGain"), digits = 10), decreasing = TRUE)
#The process of identifying the best attribute to split on now continues, but separately
#for the left branch and the right branch. Note that for the left branch, the next split is
#based on the variable OVERAGE, whereas for the right branch it is INCOME. You can
#verify this by calculating the information gain values; first for the left branch (that is,
#where HOUSE <= 600 469):
new_left_parent <- churn[which(churn$HOUSE<=600469),]
sort(attrEval(formula = LEAVE~., data = new_left_parent, estimator = "InfGain"), decreasing = TRUE)
#Next for the right branch, where HOUSE > 600 469:
new_right_parent <- churn[which(churn$HOUSE>600469),]
sort(attrEval(formula = LEAVE~., data = new_right_parent, estimator = "InfGain"), decreasing = TRUE)
tree.churn <- tree(LEAVE~., data = churn)
summary(tree.churn)
#You can visualise a tree model object by using the plot() function
plot(tree.churn)
#include the split rules on your plot by using the text() function after the plot() function call
text(tree.churn)
#You can visualise a tree model object by using the plot() function
plot(tree.churn)
#include the split rules on your plot by using the text() function after the plot() function call
text(tree.churn)
tree.churn <- tree(LEAVE~., data = churn)
summary(tree.churn)
#You can visualise a tree model object by using the plot() function
plot(tree.churn)
#include the split rules on your plot by using the text() function after the plot() function call
text(tree.churn)
tree.churn
#tree2.churn <- rpart(LEAVE~., data = churn)
#rpart.plot(tree2.churn, digits = -5)
new_obs <- data.frame(HOUSE = 515444, OVERAGE = 63, LEFTOVER = 0, INCOME = 143501)
new_obs
View(new_obs)
new_obs
str(churn)
predict(tree.churn, new_obs)
new_obs <- data.frame(HOUSE = 515444, OVERAGE = 63, LEFTOVER = 0, INCOME = 143501, COLLEGE = 1)
new_obs
predict(tree.churn, new_obs)
new_obs <- data.frame(HOUSE = 515444, OVERAGE = 63, LEFTOVER = 0, INCOME = 143501, COLLEGE = 1, HANDSET_PRICE = 200, OVER_15MINS_CALLS_PER_MONTH = 2, AVERAGE_CALL_DURATION = 5, REPORTED_SATISFACTION = "sat", REPORTED_USAGE_LEVEL = "high")
new_obs
predict(tree.churn, new_obs, type = "class")
predict(tree.churn, new_obs)
new_obs <- data.frame(HOUSE = 515444, OVERAGE = 63, LEFTOVER = 0, INCOME = 143501, COLLEGE = "one", HANDSET_PRICE = 200, OVER_15MINS_CALLS_PER_MONTH = 2, AVERAGE_CALL_DURATION = 5, REPORTED_SATISFACTION = "sat", REPORTED_USAGE_LEVEL = "high")
new_obs
new_obs
predict(tree.churn, new_obs)
new_obs <- data.frame(HOUSE = 515444, OVERAGE = 63, LEFTOVER = 0, INCOME = 143501, COLLEGE = 1, HANDSET_PRICE = 200, OVER_15MINS_CALLS_PER_MONTH = 2, AVERAGE_CALL_DURATION = 5, REPORTED_SATISFACTION = 3, REPORTED_USAGE_LEVEL = 2)
new_obs
predict(tree.churn, new_obs)
predict(tree.churn, new_obs, type = "class")
tree.churn <- tree(LEAVE~HOUSE+OVERAGE+LEFTOVER+INCOME, data = churn)
summary(tree.churn)
#You can visualise a tree model object by using the plot() function
plot(tree.churn)
#include the split rules on your plot by using the text() function after the plot() function call
text(tree.churn)
#You can visualise a tree model object by using the plot() function
plot(tree.churn)
tree.churn <- tree(LEAVE~HOUSE+OVERAGE+LEFTOVER+INCOME, data = churn)
summary(tree.churn)
#You can visualise a tree model object by using the plot() function
plot(tree.churn)
#include the split rules on your plot by using the text() function after the plot() function call
text(tree.churn)
tree.churn
# new_obs <- data.frame(HOUSE = 515444, OVERAGE = 63, LEFTOVER = 0, INCOME = 143501)
# new_obs
# predict(tree.churn, new_obs, type = "class")
#
# tree2.churn <- rpart(LEAVE~., data = churn)
# rpart.plot(tree2.churn, digits = -5)
new_obs <- data.frame(HOUSE = 515444, OVERAGE = 63, LEFTOVER = 0, INCOME = 143501)
new_obs
predict(tree.churn, new_obs)
predict(tree.churn, new_obs, type = "class")
tree2.churn <- rpart(LEAVE~., data = churn)
rpart.plot(tree2.churn, digits = -5)
index <- sample(1:nrow(churn), nrow(churn) * 0.9, replace = FALSE)
churn_train <- churn[index,]
churn_test <- churn[-index,]
str(churn_train)
str(churn_test)
tree.churn <- tree(LEAVE~., data = churn_train)
summary(tree.churn)
#You can visualise a tree model object by using the plot() function
plot(tree.churn)
#include the split rules on your plot by using the text() function after the plot() function call
text(tree.churn)
index <- sample(1:nrow(churn), nrow(churn) * 0.9, replace = FALSE)
churn_train <- churn[index,]
churn_test <- churn[-index,]
str(churn_test)
tree.churn <- tree(LEAVE~., data = churn_train)
summary(tree.churn)
#You can visualise a tree model object by using the plot() function
plot(tree.churn)
#include the split rules on your plot by using the text() function after the plot() function call
text(tree.churn)
tree.churn
# new_obs <- data.frame(HOUSE = 515444, OVERAGE = 63, LEFTOVER = 0, INCOME = 143501)
# new_obs
# predict(tree.churn, new_obs, type = "class")
# tree2.churn <- rpart(LEAVE~., data = churn)
# rpart.plot(tree2.churn, digits = -5)
churn_pred <- predict(tree.churn, churn_test[,-11], type = "class")
library(caret)
confMat <- confusionMatrix(churn_pred, churn_test$LEAVE)
confMat
churn_pred2 <- predict(tree.churn, churn_train[,-11], type = "class")
confMat <- confusionMatrix(churn_pred2, churn_train$LEAVE)
confMat
churn_pred <- predict(tree.churn, churn_test[,-11], type = "class")
confMat <- confusionMatrix(churn_pred, churn_test$LEAVE)
confMat
churn_pred2 <- predict(tree.churn, churn_train[,-11], type = "class")
confMat2 <- confusionMatrix(churn_pred2, churn_train$LEAVE)
confMat2
index <- sample(1:nrow(churn), nrow(churn) * 0.8, replace = FALSE)
churn_train <- churn[index,]
churn_test <- churn[-index,]
str(churn_test)
tree.churn <- tree(LEAVE~., data = churn_train)
summary(tree.churn)
#You can visualise a tree model object by using the plot() function
plot(tree.churn)
#include the split rules on your plot by using the text() function after the plot() function call
text(tree.churn)
tree.churn
# churn_pred <- predict(tree.churn, churn_test[,-11], type = "class")
# confMat <- confusionMatrix(churn_pred, churn_test$LEAVE)
# confMat
#
# churn_pred2 <- predict(tree.churn, churn_train[,-11], type = "class")
# confMat2 <- confusionMatrix(churn_pred2, churn_train$LEAVE)
# confMat2
# new_obs <- data.frame(HOUSE = 515444, OVERAGE = 63, LEFTOVER = 0, INCOME = 143501)
# new_obs
# predict(tree.churn, new_obs, type = "class")
# tree2.churn <- rpart(LEAVE~., data = churn)
# rpart.plot(tree2.churn, digits = -5)
churn_pred <- predict(tree.churn, churn_test[,-11], type = "class")
confMat <- confusionMatrix(churn_pred, churn_test$LEAVE)
confMat
churn_pred2 <- predict(tree.churn, churn_train[,-11], type = "class")
confMat2 <- confusionMatrix(churn_pred2, churn_train$LEAVE)
confMat2
index <- sample(1:nrow(churn), nrow(churn) * 0.9, replace = FALSE)
churn_train <- churn[index,]
churn_test <- churn[-index,]
str(churn_test)
tree.churn <- tree(LEAVE~., data = churn_train)
summary(tree.churn)
#You can visualise a tree model object by using the plot() function
plot(tree.churn)
#include the split rules on your plot by using the text() function after the plot() function call
text(tree.churn)
tree.churn
# churn_pred <- predict(tree.churn, churn_test[,-11], type = "class")
# confMat <- confusionMatrix(churn_pred, churn_test$LEAVE)
# confMat
#
# churn_pred2 <- predict(tree.churn, churn_train[,-11], type = "class")
# confMat2 <- confusionMatrix(churn_pred2, churn_train$LEAVE)
# confMat2
# new_obs <- data.frame(HOUSE = 515444, OVERAGE = 63, LEFTOVER = 0, INCOME = 143501)
# new_obs
# predict(tree.churn, new_obs, type = "class")
# tree2.churn <- rpart(LEAVE~., data = churn)
# rpart.plot(tree2.churn, digits = -5)
churn_pred <- predict(tree.churn, churn_test[,-11], type = "class")
confMat <- confusionMatrix(churn_pred, churn_test$LEAVE)
confMat
churn_pred2 <- predict(tree.churn, churn_train[,-11], type = "class")
confMat2 <- confusionMatrix(churn_pred2, churn_train$LEAVE)
confMat2
tree.churn <- tree(LEAVE~., data = churn)
tree.churn <- tree(LEAVE~., data = churn)
summary(tree.churn)
#You can visualise a tree model object by using the plot() function
plot(tree.churn)
#include the split rules on your plot by using the text() function after the plot() function call
text(tree.churn)
tree.churn
# new_obs <- data.frame(HOUSE = 515444, OVERAGE = 63, LEFTOVER = 0, INCOME = 143501)
# new_obs
# predict(tree.churn, new_obs, type = "class")
# tree2.churn <- rpart(LEAVE~., data = churn)
# rpart.plot(tree2.churn, digits = -5)
